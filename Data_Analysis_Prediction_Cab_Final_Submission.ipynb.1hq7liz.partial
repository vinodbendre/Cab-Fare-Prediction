{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Set working directory\n",
    "import os\n",
    "os.chdir(\"C:/Users/VB018797/Documents/Cab_Fare_Python\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\VB018797\\\\Documents\\\\Cab_Fare_Python'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Get the current working directory##\n",
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import libraries\n",
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Load the data from csv\n",
    "cab_train = pd.read_csv(\"train_cab.csv\", sep=',')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>pickup_datetime</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>passenger_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.5</td>\n",
       "      <td>2009-06-15 17:26:21 UTC</td>\n",
       "      <td>-73.844311</td>\n",
       "      <td>40.721319</td>\n",
       "      <td>-73.841610</td>\n",
       "      <td>40.712278</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>16.9</td>\n",
       "      <td>2010-01-05 16:52:16 UTC</td>\n",
       "      <td>-74.016048</td>\n",
       "      <td>40.711303</td>\n",
       "      <td>-73.979268</td>\n",
       "      <td>40.782004</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.7</td>\n",
       "      <td>2011-08-18 00:35:00 UTC</td>\n",
       "      <td>-73.982738</td>\n",
       "      <td>40.761270</td>\n",
       "      <td>-73.991242</td>\n",
       "      <td>40.750562</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7.7</td>\n",
       "      <td>2012-04-21 04:30:42 UTC</td>\n",
       "      <td>-73.987130</td>\n",
       "      <td>40.733143</td>\n",
       "      <td>-73.991567</td>\n",
       "      <td>40.758092</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.3</td>\n",
       "      <td>2010-03-09 07:51:00 UTC</td>\n",
       "      <td>-73.968095</td>\n",
       "      <td>40.768008</td>\n",
       "      <td>-73.956655</td>\n",
       "      <td>40.783762</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  fare_amount          pickup_datetime  pickup_longitude  pickup_latitude  \\\n",
       "0         4.5  2009-06-15 17:26:21 UTC        -73.844311        40.721319   \n",
       "1        16.9  2010-01-05 16:52:16 UTC        -74.016048        40.711303   \n",
       "2         5.7  2011-08-18 00:35:00 UTC        -73.982738        40.761270   \n",
       "3         7.7  2012-04-21 04:30:42 UTC        -73.987130        40.733143   \n",
       "4         5.3  2010-03-09 07:51:00 UTC        -73.968095        40.768008   \n",
       "\n",
       "   dropoff_longitude  dropoff_latitude  passenger_count  \n",
       "0         -73.841610         40.712278              1.0  \n",
       "1         -73.979268         40.782004              1.0  \n",
       "2         -73.991242         40.750562              2.0  \n",
       "3         -73.991567         40.758092              1.0  \n",
       "4         -73.956655         40.783762              1.0  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_train.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(16067, 7)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "######Find the shape of the data\n",
    "cab_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "fare_amount           object\n",
       "pickup_datetime       object\n",
       "pickup_longitude     float64\n",
       "pickup_latitude      float64\n",
       "dropoff_longitude    float64\n",
       "dropoff_latitude     float64\n",
       "passenger_count      float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Data types of the variables\n",
    "\n",
    "cab_train.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "####Create new variables from pickup_datetime for reading Year, Date, Month, Hour, Minute, Seconds and use str function\n",
    "\n",
    "cab_train['Year']= cab_train.pickup_datetime.str[0:4]\n",
    "cab_train['Month']= cab_train.pickup_datetime.str[5:7]\n",
    "cab_train['Date']= cab_train.pickup_datetime.str[8:10]\n",
    "cab_train['Hour']= cab_train.pickup_datetime.str[11:13]\n",
    "cab_train['Minute']= cab_train.pickup_datetime.str[14:16]\n",
    "cab_train['Seconds'] = cab_train.pickup_datetime.str[17:19]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "fare_amount           object\n",
       "pickup_datetime       object\n",
       "pickup_longitude     float64\n",
       "pickup_latitude      float64\n",
       "dropoff_longitude    float64\n",
       "dropoff_latitude     float64\n",
       "passenger_count      float64\n",
       "Year                  object\n",
       "Month                 object\n",
       "Date                  object\n",
       "Hour                  object\n",
       "Minute                object\n",
       "Seconds               object\n",
       "dtype: object"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "###Verify the shape\n",
    "cab_train.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "###Convert new variables created to type numeric since they are of type object\n",
    "cab_train['Year'] = pd.to_numeric(cab_train['Year'],errors = \"coerce\")\n",
    "cab_train['Month'] = pd.to_numeric(cab_train['Month'],errors = \"coerce\")\n",
    "cab_train['Date'] = pd.to_numeric(cab_train['Date'],errors = \"coerce\")\n",
    "cab_train['Hour'] = pd.to_numeric(cab_train['Hour'],errors = \"coerce\")\n",
    "cab_train['Minute'] = pd.to_numeric(cab_train['Minute'],errors = \"coerce\")\n",
    "cab_train['Seconds'] = pd.to_numeric(cab_train['Seconds'],errors = \"coerce\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "fare_amount           object\n",
       "pickup_datetime       object\n",
       "pickup_longitude     float64\n",
       "pickup_latitude      float64\n",
       "dropoff_longitude    float64\n",
       "dropoff_latitude     float64\n",
       "passenger_count      float64\n",
       "Year                   int64\n",
       "Month                float64\n",
       "Date                 float64\n",
       "Hour                 float64\n",
       "Minute               float64\n",
       "Seconds              float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_train.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "####Convert fare_amount variable to numeric\n",
    "\n",
    "cab_train['fare_amount'] = pd.to_numeric(cab_train['fare_amount'],errors = \"coerce\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Date</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Minute</th>\n",
       "      <th>Seconds</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.5</td>\n",
       "      <td>-73.844311</td>\n",
       "      <td>40.721319</td>\n",
       "      <td>-73.841610</td>\n",
       "      <td>40.712278</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>6.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>16.9</td>\n",
       "      <td>-74.016048</td>\n",
       "      <td>40.711303</td>\n",
       "      <td>-73.979268</td>\n",
       "      <td>40.782004</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2010</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.7</td>\n",
       "      <td>-73.982738</td>\n",
       "      <td>40.761270</td>\n",
       "      <td>-73.991242</td>\n",
       "      <td>40.750562</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2011</td>\n",
       "      <td>8.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7.7</td>\n",
       "      <td>-73.987130</td>\n",
       "      <td>40.733143</td>\n",
       "      <td>-73.991567</td>\n",
       "      <td>40.758092</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>4.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>42.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.3</td>\n",
       "      <td>-73.968095</td>\n",
       "      <td>40.768008</td>\n",
       "      <td>-73.956655</td>\n",
       "      <td>40.783762</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2010</td>\n",
       "      <td>3.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>12.1</td>\n",
       "      <td>-74.000964</td>\n",
       "      <td>40.731630</td>\n",
       "      <td>-73.972892</td>\n",
       "      <td>40.758233</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2011</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7.5</td>\n",
       "      <td>-73.980002</td>\n",
       "      <td>40.751662</td>\n",
       "      <td>-73.973802</td>\n",
       "      <td>40.764842</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>11.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>16.5</td>\n",
       "      <td>-73.951300</td>\n",
       "      <td>40.774138</td>\n",
       "      <td>-73.990095</td>\n",
       "      <td>40.751048</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>NaN</td>\n",
       "      <td>-74.006462</td>\n",
       "      <td>40.726713</td>\n",
       "      <td>-73.993078</td>\n",
       "      <td>40.731628</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>12.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>8.9</td>\n",
       "      <td>-73.980658</td>\n",
       "      <td>40.733873</td>\n",
       "      <td>-73.991540</td>\n",
       "      <td>40.758138</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>5.3</td>\n",
       "      <td>-73.996335</td>\n",
       "      <td>40.737142</td>\n",
       "      <td>-73.980721</td>\n",
       "      <td>40.733559</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>4.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5.5</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>12.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>4.1</td>\n",
       "      <td>-73.991601</td>\n",
       "      <td>40.744712</td>\n",
       "      <td>-73.983081</td>\n",
       "      <td>40.744682</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>11.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>7.0</td>\n",
       "      <td>-74.005360</td>\n",
       "      <td>40.728867</td>\n",
       "      <td>-74.008913</td>\n",
       "      <td>40.710907</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2013</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>7.7</td>\n",
       "      <td>-74.001821</td>\n",
       "      <td>40.737547</td>\n",
       "      <td>-73.998060</td>\n",
       "      <td>40.722788</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2011</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>5.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2013</td>\n",
       "      <td>11.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>12.5</td>\n",
       "      <td>-73.986430</td>\n",
       "      <td>40.760465</td>\n",
       "      <td>-73.988990</td>\n",
       "      <td>40.737075</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2014</td>\n",
       "      <td>2.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>5.3</td>\n",
       "      <td>-73.981060</td>\n",
       "      <td>40.737690</td>\n",
       "      <td>-73.994177</td>\n",
       "      <td>40.728412</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>7.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>5.3</td>\n",
       "      <td>-73.969505</td>\n",
       "      <td>40.784843</td>\n",
       "      <td>-73.958732</td>\n",
       "      <td>40.783357</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2010</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>4.0</td>\n",
       "      <td>-73.979815</td>\n",
       "      <td>40.751902</td>\n",
       "      <td>-73.979446</td>\n",
       "      <td>40.755481</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2014</td>\n",
       "      <td>12.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>10.5</td>\n",
       "      <td>-73.985382</td>\n",
       "      <td>40.747858</td>\n",
       "      <td>-73.978377</td>\n",
       "      <td>40.762070</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2010</td>\n",
       "      <td>9.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>11.5</td>\n",
       "      <td>-73.957954</td>\n",
       "      <td>40.779252</td>\n",
       "      <td>-73.961250</td>\n",
       "      <td>40.758787</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2013</td>\n",
       "      <td>2.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>46.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>4.5</td>\n",
       "      <td>-73.991707</td>\n",
       "      <td>40.770505</td>\n",
       "      <td>-73.985459</td>\n",
       "      <td>40.763671</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>8.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>23.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>4.9</td>\n",
       "      <td>-74.000632</td>\n",
       "      <td>40.747473</td>\n",
       "      <td>-73.986672</td>\n",
       "      <td>40.740577</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2010</td>\n",
       "      <td>12.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>6.1</td>\n",
       "      <td>-73.969622</td>\n",
       "      <td>40.756973</td>\n",
       "      <td>-73.981152</td>\n",
       "      <td>40.759712</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>12.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>7.3</td>\n",
       "      <td>-73.991875</td>\n",
       "      <td>40.754437</td>\n",
       "      <td>-73.977230</td>\n",
       "      <td>40.774323</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2011</td>\n",
       "      <td>6.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2011</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>4.5</td>\n",
       "      <td>-73.988893</td>\n",
       "      <td>40.760160</td>\n",
       "      <td>-73.986445</td>\n",
       "      <td>40.757857</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2011</td>\n",
       "      <td>6.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>9.3</td>\n",
       "      <td>-73.989258</td>\n",
       "      <td>40.690835</td>\n",
       "      <td>-74.004133</td>\n",
       "      <td>40.725690</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>20.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>4.5</td>\n",
       "      <td>-73.981020</td>\n",
       "      <td>40.737760</td>\n",
       "      <td>-73.980668</td>\n",
       "      <td>40.730497</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2013</td>\n",
       "      <td>8.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16037</th>\n",
       "      <td>6.5</td>\n",
       "      <td>-73.992618</td>\n",
       "      <td>40.723878</td>\n",
       "      <td>-73.977073</td>\n",
       "      <td>40.733778</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>2.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16038</th>\n",
       "      <td>5.7</td>\n",
       "      <td>-73.990336</td>\n",
       "      <td>40.718973</td>\n",
       "      <td>-73.956060</td>\n",
       "      <td>40.713974</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2010</td>\n",
       "      <td>8.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>42.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16039</th>\n",
       "      <td>12.9</td>\n",
       "      <td>-73.936462</td>\n",
       "      <td>40.794292</td>\n",
       "      <td>-73.948747</td>\n",
       "      <td>40.779097</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2010</td>\n",
       "      <td>12.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16040</th>\n",
       "      <td>6.5</td>\n",
       "      <td>-73.980597</td>\n",
       "      <td>40.744267</td>\n",
       "      <td>-73.979330</td>\n",
       "      <td>40.731205</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2014</td>\n",
       "      <td>6.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16041</th>\n",
       "      <td>11.0</td>\n",
       "      <td>-73.983610</td>\n",
       "      <td>40.747090</td>\n",
       "      <td>-73.961310</td>\n",
       "      <td>40.770980</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2014</td>\n",
       "      <td>11.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16042</th>\n",
       "      <td>8.5</td>\n",
       "      <td>-73.991425</td>\n",
       "      <td>40.749832</td>\n",
       "      <td>-74.000107</td>\n",
       "      <td>40.727898</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>4.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16043</th>\n",
       "      <td>8.5</td>\n",
       "      <td>-73.973961</td>\n",
       "      <td>40.764055</td>\n",
       "      <td>-73.986807</td>\n",
       "      <td>40.751617</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2011</td>\n",
       "      <td>11.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16044</th>\n",
       "      <td>16.5</td>\n",
       "      <td>-73.982785</td>\n",
       "      <td>40.731421</td>\n",
       "      <td>-74.011358</td>\n",
       "      <td>40.713788</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2013</td>\n",
       "      <td>4.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16045</th>\n",
       "      <td>6.5</td>\n",
       "      <td>-73.995227</td>\n",
       "      <td>40.733475</td>\n",
       "      <td>-73.984030</td>\n",
       "      <td>40.743287</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2013</td>\n",
       "      <td>9.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16046</th>\n",
       "      <td>6.0</td>\n",
       "      <td>-73.976298</td>\n",
       "      <td>40.753948</td>\n",
       "      <td>-73.993062</td>\n",
       "      <td>40.744550</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2014</td>\n",
       "      <td>4.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>40.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16047</th>\n",
       "      <td>6.1</td>\n",
       "      <td>-73.970733</td>\n",
       "      <td>40.758193</td>\n",
       "      <td>-73.979457</td>\n",
       "      <td>40.755830</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2010</td>\n",
       "      <td>3.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16048</th>\n",
       "      <td>9.7</td>\n",
       "      <td>-73.988040</td>\n",
       "      <td>40.774902</td>\n",
       "      <td>-74.005265</td>\n",
       "      <td>40.744157</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>7.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16049</th>\n",
       "      <td>15.7</td>\n",
       "      <td>-74.008657</td>\n",
       "      <td>40.715975</td>\n",
       "      <td>-73.975653</td>\n",
       "      <td>40.751233</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>7.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16050</th>\n",
       "      <td>8.5</td>\n",
       "      <td>-73.996715</td>\n",
       "      <td>40.742504</td>\n",
       "      <td>-73.977987</td>\n",
       "      <td>40.751805</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2013</td>\n",
       "      <td>1.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16051</th>\n",
       "      <td>11.5</td>\n",
       "      <td>-73.975540</td>\n",
       "      <td>40.755590</td>\n",
       "      <td>-73.944780</td>\n",
       "      <td>40.780050</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2014</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16052</th>\n",
       "      <td>10.0</td>\n",
       "      <td>-73.987298</td>\n",
       "      <td>40.722007</td>\n",
       "      <td>-74.000267</td>\n",
       "      <td>40.730342</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2014</td>\n",
       "      <td>10.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16053</th>\n",
       "      <td>4.0</td>\n",
       "      <td>-73.954977</td>\n",
       "      <td>40.788582</td>\n",
       "      <td>-73.964227</td>\n",
       "      <td>40.792305</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2014</td>\n",
       "      <td>9.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16054</th>\n",
       "      <td>5.3</td>\n",
       "      <td>-73.993929</td>\n",
       "      <td>40.756944</td>\n",
       "      <td>-73.993044</td>\n",
       "      <td>40.744088</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>11.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16055</th>\n",
       "      <td>48.3</td>\n",
       "      <td>-73.994077</td>\n",
       "      <td>40.741242</td>\n",
       "      <td>-73.830257</td>\n",
       "      <td>40.763645</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>9.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16056</th>\n",
       "      <td>38.3</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>12.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16057</th>\n",
       "      <td>5.0</td>\n",
       "      <td>-73.963582</td>\n",
       "      <td>40.774242</td>\n",
       "      <td>-73.956525</td>\n",
       "      <td>40.783952</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2013</td>\n",
       "      <td>1.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16058</th>\n",
       "      <td>5.5</td>\n",
       "      <td>-73.974265</td>\n",
       "      <td>40.756048</td>\n",
       "      <td>-73.980885</td>\n",
       "      <td>40.746838</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2014</td>\n",
       "      <td>4.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>57.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16059</th>\n",
       "      <td>5.3</td>\n",
       "      <td>-73.973297</td>\n",
       "      <td>40.743768</td>\n",
       "      <td>-73.986060</td>\n",
       "      <td>40.730768</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2010</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16060</th>\n",
       "      <td>22.0</td>\n",
       "      <td>-73.954582</td>\n",
       "      <td>40.778047</td>\n",
       "      <td>-74.005982</td>\n",
       "      <td>40.742117</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2014</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16061</th>\n",
       "      <td>10.9</td>\n",
       "      <td>-73.994191</td>\n",
       "      <td>40.751138</td>\n",
       "      <td>-73.962769</td>\n",
       "      <td>40.769719</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>5.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>42.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16062</th>\n",
       "      <td>6.5</td>\n",
       "      <td>-74.008820</td>\n",
       "      <td>40.718757</td>\n",
       "      <td>-73.998865</td>\n",
       "      <td>40.719987</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2014</td>\n",
       "      <td>12.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16063</th>\n",
       "      <td>16.1</td>\n",
       "      <td>-73.981310</td>\n",
       "      <td>40.781695</td>\n",
       "      <td>-74.014392</td>\n",
       "      <td>40.715527</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>7.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16064</th>\n",
       "      <td>8.5</td>\n",
       "      <td>-73.972507</td>\n",
       "      <td>40.753417</td>\n",
       "      <td>-73.979577</td>\n",
       "      <td>40.765495</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16065</th>\n",
       "      <td>8.1</td>\n",
       "      <td>-73.957027</td>\n",
       "      <td>40.765945</td>\n",
       "      <td>-73.981983</td>\n",
       "      <td>40.779560</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2010</td>\n",
       "      <td>5.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16066</th>\n",
       "      <td>8.5</td>\n",
       "      <td>-74.002111</td>\n",
       "      <td>40.729755</td>\n",
       "      <td>-73.983877</td>\n",
       "      <td>40.761975</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2011</td>\n",
       "      <td>12.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>33.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>16067 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       fare_amount  pickup_longitude  pickup_latitude  dropoff_longitude  \\\n",
       "0              4.5        -73.844311        40.721319         -73.841610   \n",
       "1             16.9        -74.016048        40.711303         -73.979268   \n",
       "2              5.7        -73.982738        40.761270         -73.991242   \n",
       "3              7.7        -73.987130        40.733143         -73.991567   \n",
       "4              5.3        -73.968095        40.768008         -73.956655   \n",
       "5             12.1        -74.000964        40.731630         -73.972892   \n",
       "6              7.5        -73.980002        40.751662         -73.973802   \n",
       "7             16.5        -73.951300        40.774138         -73.990095   \n",
       "8              NaN        -74.006462        40.726713         -73.993078   \n",
       "9              8.9        -73.980658        40.733873         -73.991540   \n",
       "10             5.3        -73.996335        40.737142         -73.980721   \n",
       "11             5.5          0.000000         0.000000           0.000000   \n",
       "12             4.1        -73.991601        40.744712         -73.983081   \n",
       "13             7.0        -74.005360        40.728867         -74.008913   \n",
       "14             7.7        -74.001821        40.737547         -73.998060   \n",
       "15             5.0          0.000000         0.000000           0.000000   \n",
       "16            12.5        -73.986430        40.760465         -73.988990   \n",
       "17             5.3        -73.981060        40.737690         -73.994177   \n",
       "18             5.3        -73.969505        40.784843         -73.958732   \n",
       "19             4.0        -73.979815        40.751902         -73.979446   \n",
       "20            10.5        -73.985382        40.747858         -73.978377   \n",
       "21            11.5        -73.957954        40.779252         -73.961250   \n",
       "22             4.5        -73.991707        40.770505         -73.985459   \n",
       "23             4.9        -74.000632        40.747473         -73.986672   \n",
       "24             6.1        -73.969622        40.756973         -73.981152   \n",
       "25             7.3        -73.991875        40.754437         -73.977230   \n",
       "26             NaN          0.000000         0.000000           0.000000   \n",
       "27             4.5        -73.988893        40.760160         -73.986445   \n",
       "28             9.3        -73.989258        40.690835         -74.004133   \n",
       "29             4.5        -73.981020        40.737760         -73.980668   \n",
       "...            ...               ...              ...                ...   \n",
       "16037          6.5        -73.992618        40.723878         -73.977073   \n",
       "16038          5.7        -73.990336        40.718973         -73.956060   \n",
       "16039         12.9        -73.936462        40.794292         -73.948747   \n",
       "16040          6.5        -73.980597        40.744267         -73.979330   \n",
       "16041         11.0        -73.983610        40.747090         -73.961310   \n",
       "16042          8.5        -73.991425        40.749832         -74.000107   \n",
       "16043          8.5        -73.973961        40.764055         -73.986807   \n",
       "16044         16.5        -73.982785        40.731421         -74.011358   \n",
       "16045          6.5        -73.995227        40.733475         -73.984030   \n",
       "16046          6.0        -73.976298        40.753948         -73.993062   \n",
       "16047          6.1        -73.970733        40.758193         -73.979457   \n",
       "16048          9.7        -73.988040        40.774902         -74.005265   \n",
       "16049         15.7        -74.008657        40.715975         -73.975653   \n",
       "16050          8.5        -73.996715        40.742504         -73.977987   \n",
       "16051         11.5        -73.975540        40.755590         -73.944780   \n",
       "16052         10.0        -73.987298        40.722007         -74.000267   \n",
       "16053          4.0        -73.954977        40.788582         -73.964227   \n",
       "16054          5.3        -73.993929        40.756944         -73.993044   \n",
       "16055         48.3        -73.994077        40.741242         -73.830257   \n",
       "16056         38.3          0.000000         0.000000           0.000000   \n",
       "16057          5.0        -73.963582        40.774242         -73.956525   \n",
       "16058          5.5        -73.974265        40.756048         -73.980885   \n",
       "16059          5.3        -73.973297        40.743768         -73.986060   \n",
       "16060         22.0        -73.954582        40.778047         -74.005982   \n",
       "16061         10.9        -73.994191        40.751138         -73.962769   \n",
       "16062          6.5        -74.008820        40.718757         -73.998865   \n",
       "16063         16.1        -73.981310        40.781695         -74.014392   \n",
       "16064          8.5        -73.972507        40.753417         -73.979577   \n",
       "16065          8.1        -73.957027        40.765945         -73.981983   \n",
       "16066          8.5        -74.002111        40.729755         -73.983877   \n",
       "\n",
       "       dropoff_latitude  passenger_count  Year  Month  Date  Hour  Minute  \\\n",
       "0             40.712278              1.0  2009    6.0  15.0  17.0    26.0   \n",
       "1             40.782004              1.0  2010    1.0   5.0  16.0    52.0   \n",
       "2             40.750562              2.0  2011    8.0  18.0   0.0    35.0   \n",
       "3             40.758092              1.0  2012    4.0  21.0   4.0    30.0   \n",
       "4             40.783762              1.0  2010    3.0   9.0   7.0    51.0   \n",
       "5             40.758233              1.0  2011    1.0   6.0   9.0    50.0   \n",
       "6             40.764842              1.0  2012   11.0  20.0  20.0    35.0   \n",
       "7             40.751048              1.0  2012    1.0   4.0  17.0    22.0   \n",
       "8             40.731628              1.0  2012   12.0   3.0  13.0    10.0   \n",
       "9             40.758138              2.0  2009    9.0   2.0   1.0    11.0   \n",
       "10            40.733559              1.0  2012    4.0   8.0   7.0    30.0   \n",
       "11             0.000000              3.0  2012   12.0  24.0  11.0    24.0   \n",
       "12            40.744682              2.0  2009   11.0   6.0   1.0     4.0   \n",
       "13            40.710907              1.0  2013    7.0   2.0  19.0    54.0   \n",
       "14            40.722788              2.0  2011    4.0   5.0  17.0    11.0   \n",
       "15             0.000000              1.0  2013   11.0  23.0  12.0    57.0   \n",
       "16            40.737075              1.0  2014    2.0  19.0   7.0    22.0   \n",
       "17            40.728412              1.0  2009    7.0  22.0  16.0     8.0   \n",
       "18            40.783357              1.0  2010    7.0   7.0  14.0    52.0   \n",
       "19            40.755481              1.0  2014   12.0   6.0  20.0    36.0   \n",
       "20            40.762070              1.0  2010    9.0   7.0  13.0    18.0   \n",
       "21            40.758787              1.0  2013    2.0  12.0  12.0    15.0   \n",
       "22            40.763671              1.0  2009    8.0   6.0  18.0    17.0   \n",
       "23            40.740577              1.0  2010   12.0   6.0  12.0    29.0   \n",
       "24            40.759712              1.0  2009   12.0  10.0  15.0    37.0   \n",
       "25            40.774323              3.0  2011    6.0  21.0  16.0    15.0   \n",
       "26             0.000000              1.0  2011    2.0   7.0  20.0     1.0   \n",
       "27            40.757857              3.0  2011    6.0  28.0  19.0    47.0   \n",
       "28            40.725690              1.0  2012    5.0   4.0   6.0    11.0   \n",
       "29            40.730497              2.0  2013    8.0  11.0   0.0    52.0   \n",
       "...                 ...              ...   ...    ...   ...   ...     ...   \n",
       "16037         40.733778              1.0  2012    2.0  27.0  21.0    40.0   \n",
       "16038         40.713974              1.0  2010    8.0  31.0  10.0    43.0   \n",
       "16039         40.779097              5.0  2010   12.0  11.0  16.0    25.0   \n",
       "16040         40.731205              1.0  2014    6.0  16.0   0.0     5.0   \n",
       "16041         40.770980              1.0  2014   11.0  17.0  21.0    53.0   \n",
       "16042         40.727898              2.0  2015    4.0   6.0  21.0    53.0   \n",
       "16043         40.751617              2.0  2011   11.0  17.0  10.0    58.0   \n",
       "16044         40.713788              1.0  2013    4.0  29.0   3.0     5.0   \n",
       "16045         40.743287              2.0  2013    9.0  19.0  23.0    56.0   \n",
       "16046         40.744550              1.0  2014    4.0  24.0   1.0    48.0   \n",
       "16047         40.755830              1.0  2010    3.0  18.0  11.0     9.0   \n",
       "16048         40.744157              1.0  2012    7.0  10.0  17.0    32.0   \n",
       "16049         40.751233              4.0  2012    7.0  31.0  12.0    27.0   \n",
       "16050         40.751805              1.0  2013    1.0  23.0   7.0    36.0   \n",
       "16051         40.780050              2.0  2014   10.0   1.0  20.0     5.0   \n",
       "16052         40.730342              5.0  2014   10.0   3.0  22.0    24.0   \n",
       "16053         40.792305              1.0  2014    9.0  23.0   9.0    49.0   \n",
       "16054         40.744088              1.0  2009   11.0  28.0  15.0    58.0   \n",
       "16055         40.763645              1.0  2012    9.0   5.0  17.0    34.0   \n",
       "16056          0.000000              1.0  2012   12.0  17.0  14.0    59.0   \n",
       "16057         40.783952              6.0  2013    1.0  31.0  15.0    46.0   \n",
       "16058         40.746838              2.0  2014    4.0  19.0  14.0    58.0   \n",
       "16059         40.730768              3.0  2010    1.0   3.0  18.0    26.0   \n",
       "16060         40.742117              1.0  2014   10.0   1.0   9.0    15.0   \n",
       "16061         40.769719              1.0  2009    5.0  20.0  18.0    56.0   \n",
       "16062         40.719987              1.0  2014   12.0  12.0   7.0    41.0   \n",
       "16063         40.715527              2.0  2009    7.0  13.0   7.0    58.0   \n",
       "16064         40.765495              1.0  2009   11.0  11.0  11.0    19.0   \n",
       "16065         40.779560              1.0  2010    5.0  11.0  23.0    53.0   \n",
       "16066         40.761975              NaN  2011   12.0  14.0   6.0    24.0   \n",
       "\n",
       "       Seconds  \n",
       "0         21.0  \n",
       "1         16.0  \n",
       "2          0.0  \n",
       "3         42.0  \n",
       "4          0.0  \n",
       "5         45.0  \n",
       "6          0.0  \n",
       "7          0.0  \n",
       "8          0.0  \n",
       "9          0.0  \n",
       "10        50.0  \n",
       "11         0.0  \n",
       "12         3.0  \n",
       "13         0.0  \n",
       "14         5.0  \n",
       "15         0.0  \n",
       "16         0.0  \n",
       "17         0.0  \n",
       "18         0.0  \n",
       "19        22.0  \n",
       "20         0.0  \n",
       "21        46.0  \n",
       "22        23.0  \n",
       "23         0.0  \n",
       "24         0.0  \n",
       "25         0.0  \n",
       "26         0.0  \n",
       "27         0.0  \n",
       "28        20.0  \n",
       "29         0.0  \n",
       "...        ...  \n",
       "16037     50.0  \n",
       "16038     42.0  \n",
       "16039      0.0  \n",
       "16040     19.0  \n",
       "16041      0.0  \n",
       "16042      6.0  \n",
       "16043      5.0  \n",
       "16044     45.0  \n",
       "16045      0.0  \n",
       "16046     40.0  \n",
       "16047      0.0  \n",
       "16048      0.0  \n",
       "16049      0.0  \n",
       "16050     49.0  \n",
       "16051      0.0  \n",
       "16052      0.0  \n",
       "16053      0.0  \n",
       "16054      2.0  \n",
       "16055      0.0  \n",
       "16056     16.0  \n",
       "16057      0.0  \n",
       "16058     57.0  \n",
       "16059      0.0  \n",
       "16060      0.0  \n",
       "16061     42.0  \n",
       "16062      0.0  \n",
       "16063      0.0  \n",
       "16064      7.0  \n",
       "16065      0.0  \n",
       "16066     33.0  \n",
       "\n",
       "[16067 rows x 12 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Remove pickup_datetime variable as we do not need it\n",
    "cab_train.drop(['pickup_datetime'], axis =1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(16067, 13)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "fare_amount          float64\n",
       "pickup_datetime       object\n",
       "pickup_longitude     float64\n",
       "pickup_latitude      float64\n",
       "dropoff_longitude    float64\n",
       "dropoff_latitude     float64\n",
       "passenger_count      float64\n",
       "Year                   int64\n",
       "Month                float64\n",
       "Date                 float64\n",
       "Hour                 float64\n",
       "Minute               float64\n",
       "Seconds              float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_train.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>pickup_datetime</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Date</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Minute</th>\n",
       "      <th>Seconds</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.5</td>\n",
       "      <td>2009-06-15 17:26:21 UTC</td>\n",
       "      <td>-73.844311</td>\n",
       "      <td>40.721319</td>\n",
       "      <td>-73.841610</td>\n",
       "      <td>40.712278</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>6.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>16.9</td>\n",
       "      <td>2010-01-05 16:52:16 UTC</td>\n",
       "      <td>-74.016048</td>\n",
       "      <td>40.711303</td>\n",
       "      <td>-73.979268</td>\n",
       "      <td>40.782004</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2010</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.7</td>\n",
       "      <td>2011-08-18 00:35:00 UTC</td>\n",
       "      <td>-73.982738</td>\n",
       "      <td>40.761270</td>\n",
       "      <td>-73.991242</td>\n",
       "      <td>40.750562</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2011</td>\n",
       "      <td>8.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7.7</td>\n",
       "      <td>2012-04-21 04:30:42 UTC</td>\n",
       "      <td>-73.987130</td>\n",
       "      <td>40.733143</td>\n",
       "      <td>-73.991567</td>\n",
       "      <td>40.758092</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>4.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>42.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.3</td>\n",
       "      <td>2010-03-09 07:51:00 UTC</td>\n",
       "      <td>-73.968095</td>\n",
       "      <td>40.768008</td>\n",
       "      <td>-73.956655</td>\n",
       "      <td>40.783762</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2010</td>\n",
       "      <td>3.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   fare_amount          pickup_datetime  pickup_longitude  pickup_latitude  \\\n",
       "0          4.5  2009-06-15 17:26:21 UTC        -73.844311        40.721319   \n",
       "1         16.9  2010-01-05 16:52:16 UTC        -74.016048        40.711303   \n",
       "2          5.7  2011-08-18 00:35:00 UTC        -73.982738        40.761270   \n",
       "3          7.7  2012-04-21 04:30:42 UTC        -73.987130        40.733143   \n",
       "4          5.3  2010-03-09 07:51:00 UTC        -73.968095        40.768008   \n",
       "\n",
       "   dropoff_longitude  dropoff_latitude  passenger_count  Year  Month  Date  \\\n",
       "0         -73.841610         40.712278              1.0  2009    6.0  15.0   \n",
       "1         -73.979268         40.782004              1.0  2010    1.0   5.0   \n",
       "2         -73.991242         40.750562              2.0  2011    8.0  18.0   \n",
       "3         -73.991567         40.758092              1.0  2012    4.0  21.0   \n",
       "4         -73.956655         40.783762              1.0  2010    3.0   9.0   \n",
       "\n",
       "   Hour  Minute  Seconds  \n",
       "0  17.0    26.0     21.0  \n",
       "1  16.0    52.0     16.0  \n",
       "2   0.0    35.0      0.0  \n",
       "3   4.0    30.0     42.0  \n",
       "4   7.0    51.0      0.0  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_train.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "###To calculate the distance using pickup_laongitude, pickup_latitude, dropff_longitude and dropoff_latitude we will be using haversine formula\n",
    "## First define a function which calculates the distance based on these parameters\n",
    "from math import radians, cos, sin, atan2, sqrt\n",
    "def get_distance(x):\n",
    "    ###Read the pandas series data into the function\n",
    "    long1=x[0]\n",
    "    lat1=x[1]\n",
    "    long2=x[2]\n",
    "    lat2=x[3]\n",
    "    \n",
    "    r = 6371 #Radius of earth in kilometers\n",
    "    ##Since the data is in degrees first convert them to radians\n",
    "    long1 = radians(long1)\n",
    "    lat1 = radians(lat1)\n",
    "    long2 = radians(long2)\n",
    "    lat2 = radians(lat2)\n",
    "\n",
    "    \n",
    "    ##Applying Haversine formula\n",
    "    \n",
    "    diff_long = long2 - long1\n",
    "    diff_lat = lat2 - lat1\n",
    "   \n",
    "    a = sin(diff_lat/2)**2 + cos(lat1) * cos(lat2) * sin(diff_long/2)**2\n",
    "\n",
    "    c = 2 * atan2(sqrt(a), sqrt(1-a))\n",
    "  \n",
    "    d = c * r\n",
    " \n",
    "    return d\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "cab_train['distance'] = cab_train[['pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude']].apply(get_distance,axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>pickup_datetime</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Date</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Minute</th>\n",
       "      <th>Seconds</th>\n",
       "      <th>distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.5</td>\n",
       "      <td>2009-06-15 17:26:21 UTC</td>\n",
       "      <td>-73.844311</td>\n",
       "      <td>40.721319</td>\n",
       "      <td>-73.841610</td>\n",
       "      <td>40.712278</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>6.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>1.030764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>16.9</td>\n",
       "      <td>2010-01-05 16:52:16 UTC</td>\n",
       "      <td>-74.016048</td>\n",
       "      <td>40.711303</td>\n",
       "      <td>-73.979268</td>\n",
       "      <td>40.782004</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2010</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>8.450134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.7</td>\n",
       "      <td>2011-08-18 00:35:00 UTC</td>\n",
       "      <td>-73.982738</td>\n",
       "      <td>40.761270</td>\n",
       "      <td>-73.991242</td>\n",
       "      <td>40.750562</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2011</td>\n",
       "      <td>8.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.389525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7.7</td>\n",
       "      <td>2012-04-21 04:30:42 UTC</td>\n",
       "      <td>-73.987130</td>\n",
       "      <td>40.733143</td>\n",
       "      <td>-73.991567</td>\n",
       "      <td>40.758092</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>4.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>2.799270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.3</td>\n",
       "      <td>2010-03-09 07:51:00 UTC</td>\n",
       "      <td>-73.968095</td>\n",
       "      <td>40.768008</td>\n",
       "      <td>-73.956655</td>\n",
       "      <td>40.783762</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2010</td>\n",
       "      <td>3.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.999157</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   fare_amount          pickup_datetime  pickup_longitude  pickup_latitude  \\\n",
       "0          4.5  2009-06-15 17:26:21 UTC        -73.844311        40.721319   \n",
       "1         16.9  2010-01-05 16:52:16 UTC        -74.016048        40.711303   \n",
       "2          5.7  2011-08-18 00:35:00 UTC        -73.982738        40.761270   \n",
       "3          7.7  2012-04-21 04:30:42 UTC        -73.987130        40.733143   \n",
       "4          5.3  2010-03-09 07:51:00 UTC        -73.968095        40.768008   \n",
       "\n",
       "   dropoff_longitude  dropoff_latitude  passenger_count  Year  Month  Date  \\\n",
       "0         -73.841610         40.712278              1.0  2009    6.0  15.0   \n",
       "1         -73.979268         40.782004              1.0  2010    1.0   5.0   \n",
       "2         -73.991242         40.750562              2.0  2011    8.0  18.0   \n",
       "3         -73.991567         40.758092              1.0  2012    4.0  21.0   \n",
       "4         -73.956655         40.783762              1.0  2010    3.0   9.0   \n",
       "\n",
       "   Hour  Minute  Seconds  distance  \n",
       "0  17.0    26.0     21.0  1.030764  \n",
       "1  16.0    52.0     16.0  8.450134  \n",
       "2   0.0    35.0      0.0  1.389525  \n",
       "3   4.0    30.0     42.0  2.799270  \n",
       "4   7.0    51.0      0.0  1.999157  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_train.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "###Remove the pickup_longitude, pickup_latitude, dropoff_longitude , dropoff_latitude, pickup_datetime variables as they are not needed\n",
    "cab_train.drop(['pickup_longitude','pickup_latitude','dropoff_longitude', 'dropoff_latitude','pickup_datetime'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Date</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Minute</th>\n",
       "      <th>Seconds</th>\n",
       "      <th>distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>6.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>1.030764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>16.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2010</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>8.450134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.7</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2011</td>\n",
       "      <td>8.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.389525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7.7</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>4.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>2.799270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2010</td>\n",
       "      <td>3.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.999157</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   fare_amount  passenger_count  Year  Month  Date  Hour  Minute  Seconds  \\\n",
       "0          4.5              1.0  2009    6.0  15.0  17.0    26.0     21.0   \n",
       "1         16.9              1.0  2010    1.0   5.0  16.0    52.0     16.0   \n",
       "2          5.7              2.0  2011    8.0  18.0   0.0    35.0      0.0   \n",
       "3          7.7              1.0  2012    4.0  21.0   4.0    30.0     42.0   \n",
       "4          5.3              1.0  2010    3.0   9.0   7.0    51.0      0.0   \n",
       "\n",
       "   distance  \n",
       "0  1.030764  \n",
       "1  8.450134  \n",
       "2  1.389525  \n",
       "3  2.799270  \n",
       "4  1.999157  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_train.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(16067, 9)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "###Missing value analysis###\n",
    "missing_val = pd.DataFrame(cab_train.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fare_amount</th>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>passenger_count</th>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Month</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hour</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Minute</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Seconds</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>distance</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  0\n",
       "fare_amount      25\n",
       "passenger_count  55\n",
       "Year              0\n",
       "Month             1\n",
       "Date              1\n",
       "Hour              1\n",
       "Minute            1\n",
       "Seconds           1\n",
       "distance          0"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_val"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "####Reset_index\n",
    "missing_val = missing_val.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>fare_amount</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>passenger_count</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Year</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Month</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Date</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Hour</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Minute</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Seconds</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>distance</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             index   0\n",
       "0      fare_amount  25\n",
       "1  passenger_count  55\n",
       "2             Year   0\n",
       "3            Month   1\n",
       "4             Date   1\n",
       "5             Hour   1\n",
       "6           Minute   1\n",
       "7          Seconds   1\n",
       "8         distance   0"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_val"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Rename the variable to proper name\n",
    "missing_val= missing_val.rename(columns={'index': 'Variables', 0:'Missing_Percentage'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Variables</th>\n",
       "      <th>Missing_Percentage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>fare_amount</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>passenger_count</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Year</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Month</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Date</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Hour</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Minute</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Seconds</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>distance</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Variables  Missing_Percentage\n",
       "0      fare_amount                  25\n",
       "1  passenger_count                  55\n",
       "2             Year                   0\n",
       "3            Month                   1\n",
       "4             Date                   1\n",
       "5             Hour                   1\n",
       "6           Minute                   1\n",
       "7          Seconds                   1\n",
       "8         distance                   0"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_val"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "###Calculate Percentage\n",
    "missing_val['Missing_Percentage'] = (missing_val['Missing_Percentage']/len(cab_train))*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Variables</th>\n",
       "      <th>Missing_Percentage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>fare_amount</td>\n",
       "      <td>0.155598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>passenger_count</td>\n",
       "      <td>0.342317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Year</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Month</td>\n",
       "      <td>0.006224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Date</td>\n",
       "      <td>0.006224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Hour</td>\n",
       "      <td>0.006224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Minute</td>\n",
       "      <td>0.006224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Seconds</td>\n",
       "      <td>0.006224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>distance</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Variables  Missing_Percentage\n",
       "0      fare_amount            0.155598\n",
       "1  passenger_count            0.342317\n",
       "2             Year            0.000000\n",
       "3            Month            0.006224\n",
       "4             Date            0.006224\n",
       "5             Hour            0.006224\n",
       "6           Minute            0.006224\n",
       "7          Seconds            0.006224\n",
       "8         distance            0.000000"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_val"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(16067, 9)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "####Since the missing values is too less in comparison hence we would be going ahead and ignoring those values by deleting\n",
    "cab_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "#####Remove Missing values from all the variables \n",
    "cab_train = cab_train.drop(cab_train[cab_train['passenger_count'].isnull()].index, axis=0)\n",
    "cab_train = cab_train.drop(cab_train[cab_train['fare_amount'].isnull()].index, axis=0)\n",
    "cab_train = cab_train.drop(cab_train[cab_train['Month'].isnull()].index, axis=0)\n",
    "cab_train = cab_train.drop(cab_train[cab_train['Date'].isnull()].index, axis=0)\n",
    "cab_train = cab_train.drop(cab_train[cab_train['Minute'].isnull()].index, axis=0)\n",
    "cab_train = cab_train.drop(cab_train[cab_train['Seconds'].isnull()].index, axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(15986, 9)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 0\n",
      "fare_amount      0\n",
      "passenger_count  0\n",
      "Year             0\n",
      "Month            0\n",
      "Date             0\n",
      "Hour             0\n",
      "Minute           0\n",
      "Seconds          0\n",
      "distance         0\n"
     ]
    }
   ],
   "source": [
    "###Calculate the missing value again to find out that it is removed\n",
    "missing_val = pd.DataFrame(cab_train.isnull().sum())\n",
    "print(missing_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13032       -3.00\n",
       "2039        -2.90\n",
       "2486        -2.50\n",
       "10002        0.00\n",
       "2780         0.01\n",
       "1427         1.14\n",
       "4321         2.50\n",
       "13221        2.50\n",
       "15257        2.50\n",
       "4367         2.50\n",
       "14633        2.50\n",
       "11222        2.50\n",
       "13571        2.50\n",
       "8795         2.50\n",
       "13488        2.50\n",
       "11062        2.50\n",
       "14574        2.50\n",
       "657          2.50\n",
       "9177         2.50\n",
       "2306         2.50\n",
       "11153        2.50\n",
       "4539         2.50\n",
       "14304        2.50\n",
       "4084         2.50\n",
       "6297         2.50\n",
       "12343        2.50\n",
       "12598        2.50\n",
       "3168         2.50\n",
       "3427         2.50\n",
       "12178        2.50\n",
       "           ...   \n",
       "649         66.30\n",
       "4118        69.70\n",
       "1494        70.00\n",
       "15023       73.30\n",
       "13615       75.00\n",
       "11019       75.33\n",
       "10524       75.80\n",
       "8363        76.00\n",
       "6668        76.80\n",
       "2013        77.00\n",
       "13962       77.15\n",
       "4013        77.70\n",
       "2639        79.00\n",
       "12437       80.75\n",
       "14519       82.50\n",
       "4620        85.50\n",
       "12614       87.00\n",
       "10077       87.30\n",
       "9431        88.00\n",
       "7810        95.00\n",
       "12915       96.00\n",
       "12349      104.67\n",
       "14142      108.00\n",
       "6630       128.83\n",
       "1483       165.00\n",
       "1335       180.00\n",
       "980        434.00\n",
       "607        453.00\n",
       "1072      4343.00\n",
       "1015     54343.00\n",
       "Name: fare_amount, Length: 15986, dtype: float64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##Check for negative values in fare_amount and passanger count\n",
    "cab_train[\"fare_amount\"].sort_values(ascending=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Remove the negative values from the fare_amount variable since fare cant be negative\n",
    "cab_train = cab_train.drop(cab_train[cab_train['fare_amount']<=0].index, axis=0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10711       0.0\n",
       "5150        0.0\n",
       "6575        0.0\n",
       "566         0.0\n",
       "15286       0.0\n",
       "15554       0.0\n",
       "3489        0.0\n",
       "11462       0.0\n",
       "15919       0.0\n",
       "4114        0.0\n",
       "8971        0.0\n",
       "3481        0.0\n",
       "5517        0.0\n",
       "12611       0.0\n",
       "15514       0.0\n",
       "5914        0.0\n",
       "13742       0.0\n",
       "14196       0.0\n",
       "10642       0.0\n",
       "3034        0.0\n",
       "8916        0.0\n",
       "4344        0.0\n",
       "6881        0.0\n",
       "678         0.0\n",
       "5277        0.0\n",
       "13379       0.0\n",
       "1935        0.0\n",
       "7640        0.0\n",
       "3599        0.0\n",
       "6036        0.0\n",
       "          ...  \n",
       "4048        6.0\n",
       "4595        6.0\n",
       "7973        6.0\n",
       "1110        6.0\n",
       "685         6.0\n",
       "11420       6.0\n",
       "5976        6.0\n",
       "10404       6.0\n",
       "11415       6.0\n",
       "1407        6.0\n",
       "12838       6.0\n",
       "1043       35.0\n",
       "1242       43.0\n",
       "8631       43.0\n",
       "1007       53.0\n",
       "8406       53.0\n",
       "8445       58.0\n",
       "8571       87.0\n",
       "233       236.0\n",
       "1107      345.0\n",
       "386       354.0\n",
       "263       456.0\n",
       "8715      531.2\n",
       "356       535.0\n",
       "1200      536.0\n",
       "8506      537.0\n",
       "971       554.0\n",
       "8985      557.0\n",
       "293      5334.0\n",
       "1146     5345.0\n",
       "Name: passenger_count, Length: 15982, dtype: float64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Similarily check for passenger_count\n",
    "cab_train[\"passenger_count\"].sort_values(ascending=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "#####Since passanger count cannot be zero hence we remove those values as well\n",
    "cab_train = cab_train.drop(cab_train[cab_train['passenger_count']<1].index, axis=0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(15924, 9)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3128        0.000000\n",
       "12541       0.000000\n",
       "12498       0.000000\n",
       "4799        0.000000\n",
       "872         0.000000\n",
       "12478       0.000000\n",
       "4839        0.000000\n",
       "881         0.000000\n",
       "12420       0.000000\n",
       "2722        0.000000\n",
       "12412       0.000000\n",
       "887         0.000000\n",
       "4858        0.000000\n",
       "12300       0.000000\n",
       "4872        0.000000\n",
       "12296       0.000000\n",
       "12276       0.000000\n",
       "4888        0.000000\n",
       "4889        0.000000\n",
       "4893        0.000000\n",
       "4793        0.000000\n",
       "12581       0.000000\n",
       "4777        0.000000\n",
       "12598       0.000000\n",
       "12914       0.000000\n",
       "4600        0.000000\n",
       "4606        0.000000\n",
       "12882       0.000000\n",
       "12847       0.000000\n",
       "2763        0.000000\n",
       "            ...     \n",
       "3075       97.985088\n",
       "1684       99.771579\n",
       "5663      101.094619\n",
       "12228     123.561157\n",
       "11619     127.509261\n",
       "14536     129.560455\n",
       "10710     129.950482\n",
       "7014     4447.086698\n",
       "5864     5420.988959\n",
       "2280     6026.494216\n",
       "15749    6028.926779\n",
       "15783    8656.714168\n",
       "14197    8657.136619\n",
       "12705    8661.362152\n",
       "6302     8663.039123\n",
       "12983    8664.131808\n",
       "6188     8664.191488\n",
       "4278     8665.223767\n",
       "1260     8665.268588\n",
       "10488    8665.555634\n",
       "10672    8665.702390\n",
       "10458    8665.976222\n",
       "4597     8666.566030\n",
       "10215    8666.584706\n",
       "13340    8666.613646\n",
       "11653    8666.701504\n",
       "472      8667.304968\n",
       "2397     8667.454421\n",
       "8647     8667.497512\n",
       "9147     8667.542104\n",
       "Name: distance, Length: 15924, dtype: float64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Similarily check for distance\n",
    "cab_train[\"distance\"].sort_values(ascending=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "#####Since distance in kms cannot be zero hence we remove those values as well\n",
    "cab_train = cab_train.drop(cab_train[cab_train['distance']<=0].index, axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(15468, 9)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "fare_amount        float64\n",
       "passenger_count    float64\n",
       "Year                 int64\n",
       "Month              float64\n",
       "Date               float64\n",
       "Hour               float64\n",
       "Minute             float64\n",
       "Seconds            float64\n",
       "distance           float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_train.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Convert the variables to of type float to int except fare_amount and distance variables since they contain decimal values\n",
    "cab_train['passenger_count'] = cab_train['passenger_count'].astype('int64')\n",
    "cab_train['Seconds'] = cab_train['Seconds'].astype('int64')\n",
    "cab_train['Month'] = cab_train['Month'].astype('int64')\n",
    "cab_train['Date'] = cab_train['Date'].astype('int64')\n",
    "cab_train['Minute'] = cab_train['Minute'].astype('int64')\n",
    "cab_train['Hour'] = cab_train['Hour'].astype('int64')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "fare_amount        float64\n",
       "passenger_count      int64\n",
       "Year                 int64\n",
       "Month                int64\n",
       "Date                 int64\n",
       "Hour                 int64\n",
       "Minute               int64\n",
       "Seconds              int64\n",
       "distance           float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_train.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'whiskers': [<matplotlib.lines.Line2D at 0x218fcabc4e0>,\n",
       "  <matplotlib.lines.Line2D at 0x218fcabc828>],\n",
       " 'caps': [<matplotlib.lines.Line2D at 0x218fcabcb70>,\n",
       "  <matplotlib.lines.Line2D at 0x218fcabceb8>],\n",
       " 'boxes': [<matplotlib.lines.Line2D at 0x218fcabc0b8>],\n",
       " 'medians': [<matplotlib.lines.Line2D at 0x218fcabcf98>],\n",
       " 'fliers': [<matplotlib.lines.Line2D at 0x218fcacc588>],\n",
       " 'means': []}"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Outlier Analysis\n",
    "\n",
    "#First plot boxplot for visualization\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "plt.boxplot(cab_train['passenger_count'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'whiskers': [<matplotlib.lines.Line2D at 0x218fcc78470>,\n",
       "  <matplotlib.lines.Line2D at 0x218fcc787b8>],\n",
       " 'caps': [<matplotlib.lines.Line2D at 0x218fcc78b00>,\n",
       "  <matplotlib.lines.Line2D at 0x218fcc78e48>],\n",
       " 'boxes': [<matplotlib.lines.Line2D at 0x218fcc78048>],\n",
       " 'medians': [<matplotlib.lines.Line2D at 0x218fcc78f28>],\n",
       " 'fliers': [<matplotlib.lines.Line2D at 0x218fcc84518>],\n",
       " 'means': []}"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.boxplot(cab_train['distance'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'whiskers': [<matplotlib.lines.Line2D at 0x218fccedf60>,\n",
       "  <matplotlib.lines.Line2D at 0x218fccedfd0>],\n",
       " 'caps': [<matplotlib.lines.Line2D at 0x218fccfa6a0>,\n",
       "  <matplotlib.lines.Line2D at 0x218fccfa9e8>],\n",
       " 'boxes': [<matplotlib.lines.Line2D at 0x218fccedb38>],\n",
       " 'medians': [<matplotlib.lines.Line2D at 0x218fccfad30>],\n",
       " 'fliers': [<matplotlib.lines.Line2D at 0x218fccfae10>],\n",
       " 'means': []}"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYMAAAD4CAYAAAAO9oqkAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjAsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+17YcXAAAPl0lEQVR4nO3df6jdd33H8eerN6kp22qjvS0lqUvBMG69MKeXNmD/WHWkaTeW/qHQMNYgFwKiFweDre7+UacW9J91azFCMKWpbDcWN2mQahbqHXKham+ms6mZ5E6nvaSYK6ldh1Rvsvf+uJ+0x+Tm3nPTm3vutc8HHM73+/58vt/7PlD6Ot8f55tUFZKkN7Yret2AJKn3DANJkmEgSTIMJEkYBpIkYF2vG7hU1157bW3ZsqXXbUjSmnH06NGfVVX/fGNrNgy2bNnC5ORkr9uQpDUjyY8vNuZpIkmSYSBJMgwkSRgGkiQMA0kShoG0bMbGxhgcHKSvr4/BwUHGxsZ63ZLUtTV7a6m0moyNjTE6Osr+/fu57bbbmJiYYHh4GIBdu3b1uDtpcVmrj7AeGhoqf2eg1WJwcJCHH36Y22+//dXa+Pg4IyMjHDt2rIedSa9JcrSqhuYdMwyk16+vr49XXnmF9evXv1qbnZ1lw4YNnD17toedSa9ZKAy8ZiAtg4GBASYmJn6tNjExwcDAQI86kpbGMJCWwejoKMPDw4yPjzM7O8v4+DjDw8OMjo72ujWpK15AlpbBuYvEIyMjHD9+nIGBAR544AEvHmvN8JqBJL1BeM1AkrQgw0CSZBhIkgwDSRKGgSQJw0CShGEgScIwkCTRZRgk+e8kzyb5bpLJVntLkiNJTrT3ja2eJA8lmUryvSTv6tjP7jb/RJLdHfV3t/1PtW2z3B9UknRxSzkyuL2q3tnx67X7gKeqaivwVFsHuBPY2l57gM/BXHgA9wO3ArcA958LkDZnT8d2Oy75E0mSluz1nCbaCRxoyweAuzvqj9WcbwLXJLkBuAM4UlWnq+pF4Aiwo41dXVVP19yzMR7r2JckaQV0GwYF/GuSo0n2tNr1VfUCQHu/rtU3Ac93bDvdagvVp+epXyDJniSTSSZnZma6bF2StJhun1r6nqo6meQ64EiS/1xg7nzn++sS6hcWq/YB+2DuQXULtyxJ6lZXRwZVdbK9nwK+zNw5/5+2Uzy091Nt+jRwY8fmm4GTi9Q3z1OXJK2QRcMgyW8l+Z1zy8B24BhwCDh3R9Bu4Im2fAi4t91VtA14qZ1GOgxsT7KxXTjeDhxuYy8n2dbuIrq3Y1+SpBXQzWmi64Evt7s91wH/VFVfS/IM8HiSYeAnwAfa/CeBu4Ap4BfABwGq6nSSTwLPtHmfqKrTbflDwKPAVcBX20uStEL8x20k6Q3Cf9xGkrQgw0CSZBhIkgwDSRKGgSQJw0CShGEgScIwkCRhGEiSMAwkSRgGkiQMA0kShoEkCcNAkoRhIEnCMJAkYRhIkjAMJEkYBpIkDANJEoaBJAnDQJKEYSBJwjCQJGEYSJIwDCRJGAaSJJYQBkn6knwnyVfa+k1JvpXkRJIvJrmy1d/U1qfa+JaOfXys1X+Q5I6O+o5Wm0py3/J9PElSN5ZyZPBR4HjH+meAB6tqK/AiMNzqw8CLVfV24ME2jyQ3A/cA7wB2AHtbwPQBnwXuBG4GdrW5kqQV0lUYJNkM/DHw+bYe4L3Al9qUA8DdbXlnW6eNv6/N3wkcrKpfVtWPgCnglvaaqqofVtWvgINtriRphXR7ZPD3wF8B/9fW3wr8vKrOtPVpYFNb3gQ8D9DGX2rzX62ft83F6hdIsifJZJLJmZmZLluXJC1m0TBI8ifAqao62lmeZ2otMrbU+oXFqn1VNVRVQ/39/Qt0LUlainVdzHkP8KdJ7gI2AFczd6RwTZJ17dv/ZuBkmz8N3AhMJ1kHvBk43VE/p3Obi9UlSStg0SODqvpYVW2uqi3MXQD+elX9GTAOvL9N2w080ZYPtXXa+Nerqlr9nna30U3AVuDbwDPA1nZ30pXtbxxalk8nSepKN0cGF/PXwMEknwK+A+xv9f3AF5JMMXdEcA9AVT2X5HHg+8AZ4MNVdRYgyUeAw0Af8EhVPfc6+pIkLVHmvrSvPUNDQzU5OdnrNiRpzUhytKqG5hvzF8iSJMNAkmQYSJIwDCRJGAaSJAwDSRKGgSQJw0CShGEgScIwkCRhGEiSMAwkSRgGkiQMA0kShoEkCcNAkoRhIEnCMJAkYRhIkjAMJEkYBpIkDANJEoaBJAnDQJKEYSBJwjCQJGEYSJIwDCRJdBEGSTYk+XaS/0jyXJK/bfWbknwryYkkX0xyZau/qa1PtfEtHfv6WKv/IMkdHfUdrTaV5L7l/5iSpIV0c2TwS+C9VfX7wDuBHUm2AZ8BHqyqrcCLwHCbPwy8WFVvBx5s80hyM3AP8A5gB7A3SV+SPuCzwJ3AzcCuNleStEIWDYOa879tdX17FfBe4EutfgC4uy3vbOu08fclSasfrKpfVtWPgCnglvaaqqofVtWvgINtriRphXR1zaB9g/8ucAo4AvwX8POqOtOmTAOb2vIm4HmANv4S8NbO+nnbXKw+Xx97kkwmmZyZmemmdUlSF7oKg6o6W1XvBDYz901+YL5p7T0XGVtqfb4+9lXVUFUN9ff3L964JKkrS7qbqKp+DvwbsA24Jsm6NrQZONmWp4EbAdr4m4HTnfXztrlYXZK0Qrq5m6g/yTVt+Srgj4DjwDjw/jZtN/BEWz7U1mnjX6+qavV72t1GNwFbgW8DzwBb291JVzJ3kfnQcnw4SVJ31i0+hRuAA+2unyuAx6vqK0m+DxxM8ingO8D+Nn8/8IUkU8wdEdwDUFXPJXkc+D5wBvhwVZ0FSPIR4DDQBzxSVc8t2yeUJC0qc1/a156hoaGanJzsdRuStGYkOVpVQ/ON+QtkSZJhIEkyDCRJGAaSJAwDSRKGgSQJw0CShGEgScIwkCRhGEiSMAwkSRgGkiQMA0kShoEkCcNAkoRhIEnCMJAkYRhIkjAMJEkYBpIkDANJEoaBJAnDQJKEYSBJwjCQJGEYSJIwDCRJdBEGSW5MMp7keJLnkny01d+S5EiSE+19Y6snyUNJppJ8L8m7Ova1u80/kWR3R/3dSZ5t2zyUJJfjw0qS5tfNkcEZ4C+ragDYBnw4yc3AfcBTVbUVeKqtA9wJbG2vPcDnYC48gPuBW4FbgPvPBUibs6djux2v/6NJkrq1aBhU1QtV9e9t+WXgOLAJ2AkcaNMOAHe35Z3AYzXnm8A1SW4A7gCOVNXpqnoROALsaGNXV9XTVVXAYx37kiStgCVdM0iyBfgD4FvA9VX1AswFBnBdm7YJeL5js+lWW6g+PU99vr+/J8lkksmZmZmltC5JWkDXYZDkt4F/Bv6iqv5noanz1OoS6hcWq/ZV1VBVDfX39y/WsiSpS12FQZL1zAXBP1bVv7TyT9spHtr7qVafBm7s2HwzcHKR+uZ56pKkFdLN3UQB9gPHq+rvOoYOAefuCNoNPNFRv7fdVbQNeKmdRjoMbE+ysV043g4cbmMvJ9nW/ta9HfuSJK2AdV3MeQ/w58CzSb7ban8DfBp4PMkw8BPgA23sSeAuYAr4BfBBgKo6neSTwDNt3ieq6nRb/hDwKHAV8NX2kiStkMzdwLP2DA0N1eTkZK/bkKQ1I8nRqhqab8xfIEuSDANJkmEgScIwkCRhGEiSMAwkSRgGkiQMA0kShoEkCcNAkoRhIEnCMJAkYRhIkjAMJEkYBpIkDANJEoaBJAnDQJKEYSBJwjCQJGEYSJIwDCRJGAaSJAwDSRKGgSQJw0CShGEgSaKLMEjySJJTSY511N6S5EiSE+19Y6snyUNJppJ8L8m7OrbZ3eafSLK7o/7uJM+2bR5KkuX+kJKkhXVzZPAosOO82n3AU1W1FXiqrQPcCWxtrz3A52AuPID7gVuBW4D7zwVIm7OnY7vz/5Yk6TJbNAyq6hvA6fPKO4EDbfkAcHdH/bGa803gmiQ3AHcAR6rqdFW9CBwBdrSxq6vq6aoq4LGOfUmSVsilXjO4vqpeAGjv17X6JuD5jnnTrbZQfXqeuiRpBS33BeT5zvfXJdTn33myJ8lkksmZmZlLbFGSdL5LDYOftlM8tPdTrT4N3NgxbzNwcpH65nnq86qqfVU1VFVD/f39l9i6JOl8lxoGh4BzdwTtBp7oqN/b7iraBrzUTiMdBrYn2dguHG8HDrexl5Nsa3cR3duxL0nSClm32IQkY8AfAtcmmWburqBPA48nGQZ+AnygTX8SuAuYAn4BfBCgqk4n+STwTJv3iao6d1H6Q8zdsXQV8NX2kiStoMzdxLP2DA0N1eTkZK/bkKQ1I8nRqhqab8xfIEuSDANJkmEgScIwkCRhGEiSMAwkSRgGkiQMA0kShoEkCcNAkoRhIEnCMJAkYRhIy2ZsbIzBwUH6+voYHBxkbGys1y1JXVv0EdaSFjc2Nsbo6Cj79+/ntttuY2JiguHhYQB27drV4+6kxfkIa2kZDA4O8vDDD3P77be/WhsfH2dkZIRjx471sDPpNQs9wtowkJZBX18fr7zyCuvXr3+1Njs7y4YNGzh79mwPO5Ne479nIF1mAwMDTExM/FptYmKCgYGBHnUkLY1hIC2D0dFRhoeHGR8fZ3Z2lvHxcYaHhxkdHe11a1JXvIAsLYNzF4lHRkY4fvw4AwMDPPDAA1481prhNQNJeoPwmoEkaUGGgSTJMJAkGQaSJAwDSRKGgSQJw0BaNiMjI2zYsIEkbNiwgZGRkV63JHXNMJCWwcjICHv37mXjxo1cccUVbNy4kb179xoIWjNWzY/OkuwA/gHoAz5fVZ9eaL4/OtNqsn79es6cOXNBfd26dczOzvagI+lCq/5HZ0n6gM8CdwI3A7uS3NzbrqTuzRcEC9Wl1WZVhAFwCzBVVT+sql8BB4GdPe5JWrKqevUlrSWr5UF1m4DnO9angVvPn5RkD7AH4G1ve9vKdKbfLB9/82XZbd1/9QX7n6+2rD7+0uXZr96QVksYZJ7aBV+tqmofsA/mrhlc7qb0G+gy/Q80mftPeP369czOzr76DniUoDVhtZwmmgZu7FjfDJzsUS/SJTsXAF401lqzWsLgGWBrkpuSXAncAxzqcU9S1y727d+jAq0Vq+I0UVWdSfIR4DBzt5Y+UlXP9bgtaUn8H7/WslURBgBV9STwZK/7kKQ3otVymkiS1EOGgSTJMJAkGQaSJFbRg+qWKskM8ONe9yHN41rgZ71uQprH71ZV/3wDazYMpNUqyeTFngwprVaeJpIkGQaSJMNAuhz29boBaam8ZiBJ8shAkmQYSJIwDKRlk+SRJKeSHOt1L9JSGQbS8nkU2NHrJqRLYRhIy6SqvgGc7nUf0qUwDCRJhoEkyTCQJGEYSJIwDKRlk2QMeBr4vSTTSYZ73ZPULR9HIUnyyECSZBhIkjAMJEkYBpIkDANJEoaBJAnDQJIE/D89QZ1seKpclAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.boxplot(cab_train['fare_amount'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(15468, 9)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "#####Detect and remove outliers##\n",
    "column_names = [\"passenger_count\",\"fare_amount\",\"distance\"]\n",
    "for i in column_names :\n",
    "    q75, q25 = np.percentile(cab_train.loc[:,i], [75,25])\n",
    "    iqr = q75 - q25\n",
    "    \n",
    "    min1 = q25 - (iqr*1.5)\n",
    "    max1 = q75 + (iqr*1.5)\n",
    "    \n",
    "    \n",
    "    cab_train = cab_train.drop(cab_train[cab_train.loc[:,i] < min1].index)\n",
    "    cab_train = cab_train.drop(cab_train[cab_train.loc[:,i] > max1].index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(12038, 9)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Date</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Minute</th>\n",
       "      <th>Seconds</th>\n",
       "      <th>distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>2009</td>\n",
       "      <td>6</td>\n",
       "      <td>15</td>\n",
       "      <td>17</td>\n",
       "      <td>26</td>\n",
       "      <td>21</td>\n",
       "      <td>1.030764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.7</td>\n",
       "      <td>2</td>\n",
       "      <td>2011</td>\n",
       "      <td>8</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>1.389525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7.7</td>\n",
       "      <td>1</td>\n",
       "      <td>2012</td>\n",
       "      <td>4</td>\n",
       "      <td>21</td>\n",
       "      <td>4</td>\n",
       "      <td>30</td>\n",
       "      <td>42</td>\n",
       "      <td>2.799270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.3</td>\n",
       "      <td>1</td>\n",
       "      <td>2010</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>51</td>\n",
       "      <td>0</td>\n",
       "      <td>1.999157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>12.1</td>\n",
       "      <td>1</td>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>50</td>\n",
       "      <td>45</td>\n",
       "      <td>3.787239</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   fare_amount  passenger_count  Year  Month  Date  Hour  Minute  Seconds  \\\n",
       "0          4.5                1  2009      6    15    17      26       21   \n",
       "2          5.7                2  2011      8    18     0      35        0   \n",
       "3          7.7                1  2012      4    21     4      30       42   \n",
       "4          5.3                1  2010      3     9     7      51        0   \n",
       "5         12.1                1  2011      1     6     9      50       45   \n",
       "\n",
       "   distance  \n",
       "0  1.030764  \n",
       "2  1.389525  \n",
       "3  2.799270  \n",
       "4  1.999157  \n",
       "5  3.787239  "
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x218fdaefa58>"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "###Feature Selection\n",
    "## Correlation analysis\n",
    "import seaborn as sns\n",
    "f, ax = plt.subplots(figsize=(10,8))\n",
    "\n",
    "corr = cab_train.corr()\n",
    "\n",
    "sns.heatmap(corr,mask=np.zeros_like(corr,dtype=np.bool), cmap = sns.diverging_palette(220, 10, as_cmap =True), \n",
    "square=True, ax=ax)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "##Since all variables are dependent on each other hence we will not be deleting any of the variables.\n",
    "\n",
    "#Next we go for Feature scaling to transform the data on same units\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([1.000e+00, 8.620e+02, 3.728e+03, 2.672e+03, 2.231e+03, 1.120e+03,\n",
       "        6.660e+02, 4.470e+02, 1.860e+02, 1.250e+02]),\n",
       " array([1.0000e-02, 2.2190e+00, 4.4280e+00, 6.6370e+00, 8.8460e+00,\n",
       "        1.1055e+01, 1.3264e+01, 1.5473e+01, 1.7682e+01, 1.9891e+01,\n",
       "        2.2100e+01]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Feature Scaling\n",
    "# First check for Normality check\n",
    "import matplotlib.pyplot as plt\n",
    "plt.hist(cab_train['fare_amount'], bins= 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([9541.,    0.,    0.,    0.,    0., 1926.,    0.,    0.,    0.,\n",
       "         571.]),\n",
       " array([1. , 1.2, 1.4, 1.6, 1.8, 2. , 2.2, 2.4, 2.6, 2.8, 3. ]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(cab_train['passenger_count'], bins= 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([ 780., 2718., 2616., 1878., 1334.,  917.,  665.,  496.,  342.,\n",
       "         292.]),\n",
       " array([1.11194926e-04, 6.49163049e-01, 1.29821490e+00, 1.94726676e+00,\n",
       "        2.59631861e+00, 3.24537047e+00, 3.89442232e+00, 4.54347417e+00,\n",
       "        5.19252603e+00, 5.84157788e+00, 6.49062974e+00]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(cab_train['distance'], bins= 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "#From the histogram we can see that the data is skewed and not normally distributed \n",
    "#Hence we will be going for normalisation for all the variables since all are continuous variables in our data set\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Normalisation\n",
    "cab_train_columns = list(cab_train.columns.values)\n",
    "\n",
    "for i in cab_train_columns:\n",
    "    \n",
    "    cab_train[i] = (cab_train[i] - min(cab_train[i]))/(max(cab_train[i]) - min(cab_train[i])) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Date</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Minute</th>\n",
       "      <th>Seconds</th>\n",
       "      <th>distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.203259</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.454545</td>\n",
       "      <td>0.466667</td>\n",
       "      <td>0.739130</td>\n",
       "      <td>0.440678</td>\n",
       "      <td>0.355932</td>\n",
       "      <td>0.158794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.257583</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.636364</td>\n",
       "      <td>0.566667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.593220</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.214068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.348121</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.272727</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.173913</td>\n",
       "      <td>0.508475</td>\n",
       "      <td>0.711864</td>\n",
       "      <td>0.431269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.239475</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.181818</td>\n",
       "      <td>0.266667</td>\n",
       "      <td>0.304348</td>\n",
       "      <td>0.864407</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.307995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.547306</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.391304</td>\n",
       "      <td>0.847458</td>\n",
       "      <td>0.762712</td>\n",
       "      <td>0.583486</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   fare_amount  passenger_count      Year     Month      Date      Hour  \\\n",
       "0     0.203259              0.0  0.000000  0.454545  0.466667  0.739130   \n",
       "2     0.257583              0.5  0.333333  0.636364  0.566667  0.000000   \n",
       "3     0.348121              0.0  0.500000  0.272727  0.666667  0.173913   \n",
       "4     0.239475              0.0  0.166667  0.181818  0.266667  0.304348   \n",
       "5     0.547306              0.0  0.333333  0.000000  0.166667  0.391304   \n",
       "\n",
       "     Minute   Seconds  distance  \n",
       "0  0.440678  0.355932  0.158794  \n",
       "2  0.593220  0.000000  0.214068  \n",
       "3  0.508475  0.711864  0.431269  \n",
       "4  0.864407  0.000000  0.307995  \n",
       "5  0.847458  0.762712  0.583486  "
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_train.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "cab_train = cab_train.reset_index()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Date</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Minute</th>\n",
       "      <th>Seconds</th>\n",
       "      <th>distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.203259</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.454545</td>\n",
       "      <td>0.466667</td>\n",
       "      <td>0.739130</td>\n",
       "      <td>0.440678</td>\n",
       "      <td>0.355932</td>\n",
       "      <td>0.158794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0.257583</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.636364</td>\n",
       "      <td>0.566667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.593220</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.214068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0.348121</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.272727</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.173913</td>\n",
       "      <td>0.508475</td>\n",
       "      <td>0.711864</td>\n",
       "      <td>0.431269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0.239475</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.181818</td>\n",
       "      <td>0.266667</td>\n",
       "      <td>0.304348</td>\n",
       "      <td>0.864407</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.307995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.547306</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.391304</td>\n",
       "      <td>0.847458</td>\n",
       "      <td>0.762712</td>\n",
       "      <td>0.583486</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index  fare_amount  passenger_count      Year     Month      Date  \\\n",
       "0      0     0.203259              0.0  0.000000  0.454545  0.466667   \n",
       "1      2     0.257583              0.5  0.333333  0.636364  0.566667   \n",
       "2      3     0.348121              0.0  0.500000  0.272727  0.666667   \n",
       "3      4     0.239475              0.0  0.166667  0.181818  0.266667   \n",
       "4      5     0.547306              0.0  0.333333  0.000000  0.166667   \n",
       "\n",
       "       Hour    Minute   Seconds  distance  \n",
       "0  0.739130  0.440678  0.355932  0.158794  \n",
       "1  0.000000  0.593220  0.000000  0.214068  \n",
       "2  0.173913  0.508475  0.711864  0.431269  \n",
       "3  0.304348  0.864407  0.000000  0.307995  \n",
       "4  0.391304  0.847458  0.762712  0.583486  "
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_train.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "cab_train.drop(['index'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Date</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Minute</th>\n",
       "      <th>Seconds</th>\n",
       "      <th>distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.203259</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.454545</td>\n",
       "      <td>0.466667</td>\n",
       "      <td>0.739130</td>\n",
       "      <td>0.440678</td>\n",
       "      <td>0.355932</td>\n",
       "      <td>0.158794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.257583</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.636364</td>\n",
       "      <td>0.566667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.593220</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.214068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.348121</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.272727</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.173913</td>\n",
       "      <td>0.508475</td>\n",
       "      <td>0.711864</td>\n",
       "      <td>0.431269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.239475</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.181818</td>\n",
       "      <td>0.266667</td>\n",
       "      <td>0.304348</td>\n",
       "      <td>0.864407</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.307995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.547306</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.391304</td>\n",
       "      <td>0.847458</td>\n",
       "      <td>0.762712</td>\n",
       "      <td>0.583486</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   fare_amount  passenger_count      Year     Month      Date      Hour  \\\n",
       "0     0.203259              0.0  0.000000  0.454545  0.466667  0.739130   \n",
       "1     0.257583              0.5  0.333333  0.636364  0.566667  0.000000   \n",
       "2     0.348121              0.0  0.500000  0.272727  0.666667  0.173913   \n",
       "3     0.239475              0.0  0.166667  0.181818  0.266667  0.304348   \n",
       "4     0.547306              0.0  0.333333  0.000000  0.166667  0.391304   \n",
       "\n",
       "     Minute   Seconds  distance  \n",
       "0  0.440678  0.355932  0.158794  \n",
       "1  0.593220  0.000000  0.214068  \n",
       "2  0.508475  0.711864  0.431269  \n",
       "3  0.864407  0.000000  0.307995  \n",
       "4  0.847458  0.762712  0.583486  "
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_train.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "###Evaluate different models\n",
    "\n",
    "#First divide the data into train and test through sampling\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "model_train, model_test = train_test_split(cab_train,test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Linear regression\n",
    "import statsmodels.api as sm\n",
    "\n",
    "model_LR = sm.OLS(model_train.iloc[:,0], model_train.iloc[:,1:9]).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>fare_amount</td>   <th>  R-squared (uncentered):</th>       <td>   0.945</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared (uncentered):</th>  <td>   0.945</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th>           <td>2.060e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Thu, 19 Mar 2020</td> <th>  Prob (F-statistic):</th>            <td>  0.00</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>02:23:11</td>     <th>  Log-Likelihood:    </th>           <td>  8626.4</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  9630</td>      <th>  AIC:               </th>          <td>-1.724e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  9622</td>      <th>  BIC:               </th>          <td>-1.718e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     8</td>      <th>                     </th>               <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>               <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "         <td></td>            <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>passenger_count</th> <td>    0.0167</td> <td>    0.004</td> <td>    4.410</td> <td> 0.000</td> <td>    0.009</td> <td>    0.024</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Year</th>            <td>    0.1290</td> <td>    0.003</td> <td>   42.316</td> <td> 0.000</td> <td>    0.123</td> <td>    0.135</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Month</th>           <td>    0.0579</td> <td>    0.003</td> <td>   19.444</td> <td> 0.000</td> <td>    0.052</td> <td>    0.064</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date</th>            <td>    0.0307</td> <td>    0.003</td> <td>    9.514</td> <td> 0.000</td> <td>    0.024</td> <td>    0.037</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Hour</th>            <td>    0.0509</td> <td>    0.003</td> <td>   15.858</td> <td> 0.000</td> <td>    0.045</td> <td>    0.057</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Minute</th>          <td>    0.0335</td> <td>    0.003</td> <td>   10.605</td> <td> 0.000</td> <td>    0.027</td> <td>    0.040</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Seconds</th>         <td>    0.0064</td> <td>    0.003</td> <td>    2.146</td> <td> 0.032</td> <td>    0.001</td> <td>    0.012</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>distance</th>        <td>    0.6498</td> <td>    0.004</td> <td>  151.586</td> <td> 0.000</td> <td>    0.641</td> <td>    0.658</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>2702.809</td> <th>  Durbin-Watson:     </th> <td>   1.995</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th>  <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>11754.113</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>           <td> 1.314</td>  <th>  Prob(JB):          </th> <td>    0.00</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>       <td> 7.732</td>  <th>  Cond. No.          </th> <td>    5.59</td> \n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                                 OLS Regression Results                                \n",
       "=======================================================================================\n",
       "Dep. Variable:            fare_amount   R-squared (uncentered):                   0.945\n",
       "Model:                            OLS   Adj. R-squared (uncentered):              0.945\n",
       "Method:                 Least Squares   F-statistic:                          2.060e+04\n",
       "Date:                Thu, 19 Mar 2020   Prob (F-statistic):                        0.00\n",
       "Time:                        02:23:11   Log-Likelihood:                          8626.4\n",
       "No. Observations:                9630   AIC:                                 -1.724e+04\n",
       "Df Residuals:                    9622   BIC:                                 -1.718e+04\n",
       "Df Model:                           8                                                  \n",
       "Covariance Type:            nonrobust                                                  \n",
       "===================================================================================\n",
       "                      coef    std err          t      P>|t|      [0.025      0.975]\n",
       "-----------------------------------------------------------------------------------\n",
       "passenger_count     0.0167      0.004      4.410      0.000       0.009       0.024\n",
       "Year                0.1290      0.003     42.316      0.000       0.123       0.135\n",
       "Month               0.0579      0.003     19.444      0.000       0.052       0.064\n",
       "Date                0.0307      0.003      9.514      0.000       0.024       0.037\n",
       "Hour                0.0509      0.003     15.858      0.000       0.045       0.057\n",
       "Minute              0.0335      0.003     10.605      0.000       0.027       0.040\n",
       "Seconds             0.0064      0.003      2.146      0.032       0.001       0.012\n",
       "distance            0.6498      0.004    151.586      0.000       0.641       0.658\n",
       "==============================================================================\n",
       "Omnibus:                     2702.809   Durbin-Watson:                   1.995\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            11754.113\n",
       "Skew:                           1.314   Prob(JB):                         0.00\n",
       "Kurtosis:                       7.732   Cond. No.                         5.59\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_LR.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Predict the test values \n",
    "predictions_LR = model_LR.predict(model_test.iloc[:,1:9])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculate MAPE\n",
    "def MAPE(y_actual, y_predict):\n",
    "    mape = np.mean(np.abs((y_actual-y_predict)/y_actual))*100\n",
    "    return mape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "MAPE_LR = MAPE(model_test.iloc[:,0], predictions_LR)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "Accuracy_LR = 100- MAPE_LR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "####Decision Tree Model###\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "\n",
    "Model_DTM =DecisionTreeRegressor(max_depth=2).fit(model_train.iloc[:,1:9], model_train.iloc[:,0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Apply Model on test data\n",
    "predictions_DT = Model_DTM.predict(model_test.iloc[:,1:9])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "MAPE_DT = MAPE(model_test.iloc[:,0], predictions_DT)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "Accuracy_DT = 100 - MAPE_DT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Random Forest Model \n",
    "from sklearn.ensemble import RandomForestRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "###Apply the model\n",
    "model_RF = RandomForestRegressor(n_estimators = 500).fit(model_train.iloc[:,1:9], model_train.iloc[:,0])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Apply Model on test data\n",
    "predictions_RF = model_RF.predict(model_test.iloc[:,1:9])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "MAPE_RF = MAPE(model_test.iloc[:,0], predictions_RF)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "Accuracy_RF = 100 - MAPE_RF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "Model_Evaluation = [[\"Linear Regression\", MAPE_LR, Accuracy_LR],[\"Decision Tree\", MAPE_DT, Accuracy_DT],[\"Random Forest\", MAPE_RF, Accuracy_RF]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "Model_Evaluation = pd.DataFrame(Model_Evaluation, columns = ['Model Name', 'MAPE','Accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model Name</th>\n",
       "      <th>MAPE</th>\n",
       "      <th>Accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Linear Regression</td>\n",
       "      <td>inf</td>\n",
       "      <td>-inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>inf</td>\n",
       "      <td>-inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>inf</td>\n",
       "      <td>-inf</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Model Name  MAPE  Accuracy\n",
       "0  Linear Regression   inf      -inf\n",
       "1      Decision Tree   inf      -inf\n",
       "2      Random Forest   inf      -inf"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Model_Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Load the test data from csv\n",
    "cab_test = pd.read_csv(\"test_cab.csv\", sep=',')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pickup_datetime</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>passenger_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-27 13:08:24 UTC</td>\n",
       "      <td>-73.973320</td>\n",
       "      <td>40.763805</td>\n",
       "      <td>-73.981430</td>\n",
       "      <td>40.743835</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-27 13:08:24 UTC</td>\n",
       "      <td>-73.986862</td>\n",
       "      <td>40.719383</td>\n",
       "      <td>-73.998886</td>\n",
       "      <td>40.739201</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-10-08 11:53:44 UTC</td>\n",
       "      <td>-73.982524</td>\n",
       "      <td>40.751260</td>\n",
       "      <td>-73.979654</td>\n",
       "      <td>40.746139</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2012-12-01 21:12:12 UTC</td>\n",
       "      <td>-73.981160</td>\n",
       "      <td>40.767807</td>\n",
       "      <td>-73.990448</td>\n",
       "      <td>40.751635</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012-12-01 21:12:12 UTC</td>\n",
       "      <td>-73.966046</td>\n",
       "      <td>40.789775</td>\n",
       "      <td>-73.988565</td>\n",
       "      <td>40.744427</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           pickup_datetime  pickup_longitude  pickup_latitude  \\\n",
       "0  2015-01-27 13:08:24 UTC        -73.973320        40.763805   \n",
       "1  2015-01-27 13:08:24 UTC        -73.986862        40.719383   \n",
       "2  2011-10-08 11:53:44 UTC        -73.982524        40.751260   \n",
       "3  2012-12-01 21:12:12 UTC        -73.981160        40.767807   \n",
       "4  2012-12-01 21:12:12 UTC        -73.966046        40.789775   \n",
       "\n",
       "   dropoff_longitude  dropoff_latitude  passenger_count  \n",
       "0         -73.981430         40.743835                1  \n",
       "1         -73.998886         40.739201                1  \n",
       "2         -73.979654         40.746139                1  \n",
       "3         -73.990448         40.751635                1  \n",
       "4         -73.988565         40.744427                1  "
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_test.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9914, 6)"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "######Find the shape of the data\n",
    "cab_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pickup_datetime       object\n",
       "pickup_longitude     float64\n",
       "pickup_latitude      float64\n",
       "dropoff_longitude    float64\n",
       "dropoff_latitude     float64\n",
       "passenger_count        int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_test.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Similar to train Create new variables from pickup_datetime like Year, Date, Month, Hour, Minute, Seconds and use str function\n",
    "\n",
    "cab_test['Year']= cab_test.pickup_datetime.str[0:4]\n",
    "cab_test['Month']= cab_test.pickup_datetime.str[5:7]\n",
    "cab_test['Date']= cab_test.pickup_datetime.str[8:10]\n",
    "cab_test['Hour']= cab_test.pickup_datetime.str[11:13]\n",
    "cab_test['Minute']= cab_test.pickup_datetime.str[14:16]\n",
    "cab_test['Seconds'] = cab_test.pickup_datetime.str[17:19]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pickup_datetime       object\n",
       "pickup_longitude     float64\n",
       "pickup_latitude      float64\n",
       "dropoff_longitude    float64\n",
       "dropoff_latitude     float64\n",
       "passenger_count        int64\n",
       "Year                  object\n",
       "Month                 object\n",
       "Date                  object\n",
       "Hour                  object\n",
       "Minute                object\n",
       "Seconds               object\n",
       "dtype: object"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "###Verify the shape\n",
    "cab_test.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pickup_datetime</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Date</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Minute</th>\n",
       "      <th>Seconds</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-27 13:08:24 UTC</td>\n",
       "      <td>-73.973320</td>\n",
       "      <td>40.763805</td>\n",
       "      <td>-73.981430</td>\n",
       "      <td>40.743835</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>01</td>\n",
       "      <td>27</td>\n",
       "      <td>13</td>\n",
       "      <td>08</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-27 13:08:24 UTC</td>\n",
       "      <td>-73.986862</td>\n",
       "      <td>40.719383</td>\n",
       "      <td>-73.998886</td>\n",
       "      <td>40.739201</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>01</td>\n",
       "      <td>27</td>\n",
       "      <td>13</td>\n",
       "      <td>08</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-10-08 11:53:44 UTC</td>\n",
       "      <td>-73.982524</td>\n",
       "      <td>40.751260</td>\n",
       "      <td>-73.979654</td>\n",
       "      <td>40.746139</td>\n",
       "      <td>1</td>\n",
       "      <td>2011</td>\n",
       "      <td>10</td>\n",
       "      <td>08</td>\n",
       "      <td>11</td>\n",
       "      <td>53</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2012-12-01 21:12:12 UTC</td>\n",
       "      <td>-73.981160</td>\n",
       "      <td>40.767807</td>\n",
       "      <td>-73.990448</td>\n",
       "      <td>40.751635</td>\n",
       "      <td>1</td>\n",
       "      <td>2012</td>\n",
       "      <td>12</td>\n",
       "      <td>01</td>\n",
       "      <td>21</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012-12-01 21:12:12 UTC</td>\n",
       "      <td>-73.966046</td>\n",
       "      <td>40.789775</td>\n",
       "      <td>-73.988565</td>\n",
       "      <td>40.744427</td>\n",
       "      <td>1</td>\n",
       "      <td>2012</td>\n",
       "      <td>12</td>\n",
       "      <td>01</td>\n",
       "      <td>21</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           pickup_datetime  pickup_longitude  pickup_latitude  \\\n",
       "0  2015-01-27 13:08:24 UTC        -73.973320        40.763805   \n",
       "1  2015-01-27 13:08:24 UTC        -73.986862        40.719383   \n",
       "2  2011-10-08 11:53:44 UTC        -73.982524        40.751260   \n",
       "3  2012-12-01 21:12:12 UTC        -73.981160        40.767807   \n",
       "4  2012-12-01 21:12:12 UTC        -73.966046        40.789775   \n",
       "\n",
       "   dropoff_longitude  dropoff_latitude  passenger_count  Year Month Date Hour  \\\n",
       "0         -73.981430         40.743835                1  2015    01   27   13   \n",
       "1         -73.998886         40.739201                1  2015    01   27   13   \n",
       "2         -73.979654         40.746139                1  2011    10   08   11   \n",
       "3         -73.990448         40.751635                1  2012    12   01   21   \n",
       "4         -73.988565         40.744427                1  2012    12   01   21   \n",
       "\n",
       "  Minute Seconds  \n",
       "0     08      24  \n",
       "1     08      24  \n",
       "2     53      44  \n",
       "3     12      12  \n",
       "4     12      12  "
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_test.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "###Convert new variables created to type numeric since they are of type object\n",
    "cab_test['Year'] = pd.to_numeric(cab_test['Year'],errors = \"coerce\")\n",
    "cab_test['Month'] = pd.to_numeric(cab_test['Month'],errors = \"coerce\")\n",
    "cab_test['Date'] = pd.to_numeric(cab_test['Date'],errors = \"coerce\")\n",
    "cab_test['Hour'] = pd.to_numeric(cab_test['Hour'],errors = \"coerce\")\n",
    "cab_test['Minute'] = pd.to_numeric(cab_test['Minute'],errors = \"coerce\")\n",
    "cab_test['Seconds'] = pd.to_numeric(cab_test['Seconds'],errors = \"coerce\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pickup_datetime       object\n",
       "pickup_longitude     float64\n",
       "pickup_latitude      float64\n",
       "dropoff_longitude    float64\n",
       "dropoff_latitude     float64\n",
       "passenger_count        int64\n",
       "Year                   int64\n",
       "Month                  int64\n",
       "Date                   int64\n",
       "Hour                   int64\n",
       "Minute                 int64\n",
       "Seconds                int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_test.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculate distance using Haversine formula\n",
    "cab_test['distance'] = cab_test[['pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude']].apply(get_distance,axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "###Remove the pickup_longitude, pickup_latitude, dropoff_longitude , dropoff_latitude, pickup_datetime variables as they are not needed\n",
    "cab_test.drop(['pickup_longitude','pickup_latitude','dropoff_longitude', 'dropoff_latitude','pickup_datetime'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Date</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Minute</th>\n",
       "      <th>Seconds</th>\n",
       "      <th>distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>13</td>\n",
       "      <td>8</td>\n",
       "      <td>24</td>\n",
       "      <td>2.323259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>13</td>\n",
       "      <td>8</td>\n",
       "      <td>24</td>\n",
       "      <td>2.425353</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   passenger_count  Year  Month  Date  Hour  Minute  Seconds  distance\n",
       "0                1  2015      1    27    13       8       24  2.323259\n",
       "1                1  2015      1    27    13       8       24  2.425353"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_test.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9914, 8)"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "missing_val = pd.DataFrame(cab_test.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>passenger_count</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Month</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hour</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Minute</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Seconds</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>distance</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 0\n",
       "passenger_count  0\n",
       "Year             0\n",
       "Month            0\n",
       "Date             0\n",
       "Hour             0\n",
       "Minute           0\n",
       "Seconds          0\n",
       "distance         0"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_val"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "#There are no missing values in cab_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       1\n",
       "4616    1\n",
       "4615    1\n",
       "4614    1\n",
       "4613    1\n",
       "4612    1\n",
       "4611    1\n",
       "4610    1\n",
       "4609    1\n",
       "4608    1\n",
       "4607    1\n",
       "4606    1\n",
       "4605    1\n",
       "4604    1\n",
       "4603    1\n",
       "4602    1\n",
       "4601    1\n",
       "4600    1\n",
       "4599    1\n",
       "4598    1\n",
       "4597    1\n",
       "4596    1\n",
       "4595    1\n",
       "4594    1\n",
       "4617    1\n",
       "4593    1\n",
       "4618    1\n",
       "4620    1\n",
       "4643    1\n",
       "4642    1\n",
       "       ..\n",
       "9818    6\n",
       "9819    6\n",
       "9820    6\n",
       "9821    6\n",
       "9822    6\n",
       "9814    6\n",
       "9803    6\n",
       "9802    6\n",
       "9801    6\n",
       "9782    6\n",
       "9783    6\n",
       "9784    6\n",
       "9785    6\n",
       "9786    6\n",
       "9787    6\n",
       "9788    6\n",
       "9789    6\n",
       "9790    6\n",
       "9791    6\n",
       "9792    6\n",
       "9793    6\n",
       "9794    6\n",
       "9795    6\n",
       "9796    6\n",
       "9797    6\n",
       "9798    6\n",
       "9799    6\n",
       "9800    6\n",
       "9780    6\n",
       "9913    6\n",
       "Name: passenger_count, Length: 9914, dtype: int64"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##Check for any negative values\n",
    "cab_test[\"passenger_count\"].sort_values(ascending=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6335     0.000000\n",
       "7637     0.000000\n",
       "2258     0.000000\n",
       "943      0.000000\n",
       "8835     0.000000\n",
       "860      0.000000\n",
       "9221     0.000000\n",
       "6157     0.000000\n",
       "2936     0.000000\n",
       "2247     0.000000\n",
       "1189     0.000000\n",
       "318      0.000000\n",
       "491      0.000000\n",
       "8424     0.000000\n",
       "8426     0.000000\n",
       "5443     0.000000\n",
       "498      0.000000\n",
       "2618     0.000000\n",
       "976      0.000000\n",
       "6954     0.000000\n",
       "7874     0.000000\n",
       "1409     0.000000\n",
       "2675     0.000000\n",
       "981      0.000000\n",
       "451      0.000000\n",
       "7839     0.000000\n",
       "1429     0.000000\n",
       "1218     0.000000\n",
       "2641     0.000000\n",
       "121      0.000000\n",
       "          ...    \n",
       "4018    21.738063\n",
       "7857    21.782684\n",
       "8944    21.785143\n",
       "8876    21.811484\n",
       "7000    21.845869\n",
       "5523    21.880030\n",
       "628     21.880433\n",
       "6260    22.064573\n",
       "7346    22.080922\n",
       "8825    22.113966\n",
       "5373    22.132067\n",
       "248     22.344419\n",
       "2718    22.407984\n",
       "7787    22.474632\n",
       "8173    22.640229\n",
       "2175    23.051119\n",
       "5905    23.099448\n",
       "5357    23.120250\n",
       "5865    23.443658\n",
       "2487    25.364627\n",
       "706     25.565980\n",
       "4864    27.169511\n",
       "9391    27.287881\n",
       "5115    27.653128\n",
       "3569    27.863332\n",
       "4334    28.837177\n",
       "7269    33.604366\n",
       "5887    97.240975\n",
       "8529    98.192419\n",
       "4080    99.996040\n",
       "Name: distance, Length: 9914, dtype: float64"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##Similarily check for distance variable\n",
    "cab_test[\"distance\"].sort_values(ascending=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "#####Since distance in kms cannot be zero hence we remove those values as well\n",
    "cab_test = cab_test.drop(cab_test[cab_test['distance']<=0].index, axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9829, 8)"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "passenger_count      int64\n",
       "Year                 int64\n",
       "Month                int64\n",
       "Date                 int64\n",
       "Hour                 int64\n",
       "Minute               int64\n",
       "Seconds              int64\n",
       "distance           float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_test.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'whiskers': [<matplotlib.lines.Line2D at 0x218ffe46fd0>,\n",
       "  <matplotlib.lines.Line2D at 0x21895940668>],\n",
       " 'caps': [<matplotlib.lines.Line2D at 0x218959409b0>,\n",
       "  <matplotlib.lines.Line2D at 0x21895940cf8>],\n",
       " 'boxes': [<matplotlib.lines.Line2D at 0x218ffe46e80>],\n",
       " 'medians': [<matplotlib.lines.Line2D at 0x21895940dd8>],\n",
       " 'fliers': [<matplotlib.lines.Line2D at 0x218959503c8>],\n",
       " 'means': []}"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.boxplot(cab_test['passenger_count'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Since cab capacity is from 1 to 6 we wont go for any outlier detection for passenger_count variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'whiskers': [<matplotlib.lines.Line2D at 0x218957a6208>,\n",
       "  <matplotlib.lines.Line2D at 0x21895798b38>],\n",
       " 'caps': [<matplotlib.lines.Line2D at 0x218957987f0>,\n",
       "  <matplotlib.lines.Line2D at 0x218957984a8>],\n",
       " 'boxes': [<matplotlib.lines.Line2D at 0x218957a6358>],\n",
       " 'medians': [<matplotlib.lines.Line2D at 0x21895798160>],\n",
       " 'fliers': [<matplotlib.lines.Line2D at 0x21895798080>],\n",
       " 'means': []}"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.boxplot(cab_test['distance'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9829, 8)"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Detect and remove outliers for distance variable\n",
    "e75, f25 = np.percentile(cab_test['distance'], [75,25])\n",
    "iqr = e75 - f25\n",
    "    \n",
    "min3 = f25 - (iqr*1.5)\n",
    "max3 = e75 + (iqr*1.5)\n",
    "    \n",
    "cab_test = cab_test.drop(cab_test[cab_test['distance'] < min3].index, axis = 0)\n",
    "cab_test = cab_test.drop(cab_test[cab_test['distance'] > max3].index, axis = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9013, 8)"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Normalisation of Data\n",
    "cab_test_columns = list(cab_test.columns.values)\n",
    "\n",
    "for i in cab_test_columns:\n",
    "    \n",
    "    cab_test[i] = (cab_test[i] - min(cab_test[i]))/(max(cab_test[i]) - min(cab_test[i])) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Date</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Minute</th>\n",
       "      <th>Seconds</th>\n",
       "      <th>distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.565217</td>\n",
       "      <td>0.135593</td>\n",
       "      <td>0.40678</td>\n",
       "      <td>0.284350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.565217</td>\n",
       "      <td>0.135593</td>\n",
       "      <td>0.40678</td>\n",
       "      <td>0.296853</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   passenger_count  Year  Month      Date      Hour    Minute  Seconds  \\\n",
       "0              0.0   1.0    0.0  0.866667  0.565217  0.135593  0.40678   \n",
       "1              0.0   1.0    0.0  0.866667  0.565217  0.135593  0.40678   \n",
       "\n",
       "   distance  \n",
       "0  0.284350  \n",
       "1  0.296853  "
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_test.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We have cleaned the test data and completed the different exploratory analysis.\n",
    "#Now Predict fare_amount on test data provided using Random Forest Model\n",
    "\n",
    "predictions_RF_test = model_RF.predict(cab_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "###Create new variable to plot the data\n",
    "cab_test['Predicted_fare_amount'] = predictions_RF_test\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Date</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Minute</th>\n",
       "      <th>Seconds</th>\n",
       "      <th>distance</th>\n",
       "      <th>Predicted_fare_amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.565217</td>\n",
       "      <td>0.135593</td>\n",
       "      <td>0.406780</td>\n",
       "      <td>0.284350</td>\n",
       "      <td>0.432694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.565217</td>\n",
       "      <td>0.135593</td>\n",
       "      <td>0.406780</td>\n",
       "      <td>0.296853</td>\n",
       "      <td>0.429036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.818182</td>\n",
       "      <td>0.233333</td>\n",
       "      <td>0.478261</td>\n",
       "      <td>0.898305</td>\n",
       "      <td>0.745763</td>\n",
       "      <td>0.075582</td>\n",
       "      <td>0.198533</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.913043</td>\n",
       "      <td>0.203390</td>\n",
       "      <td>0.203390</td>\n",
       "      <td>0.239988</td>\n",
       "      <td>0.337320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.913043</td>\n",
       "      <td>0.203390</td>\n",
       "      <td>0.203390</td>\n",
       "      <td>0.659606</td>\n",
       "      <td>0.543531</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   passenger_count      Year     Month      Date      Hour    Minute  \\\n",
       "0              0.0  1.000000  0.000000  0.866667  0.565217  0.135593   \n",
       "1              0.0  1.000000  0.000000  0.866667  0.565217  0.135593   \n",
       "2              0.0  0.333333  0.818182  0.233333  0.478261  0.898305   \n",
       "3              0.0  0.500000  1.000000  0.000000  0.913043  0.203390   \n",
       "4              0.0  0.500000  1.000000  0.000000  0.913043  0.203390   \n",
       "\n",
       "    Seconds  distance  Predicted_fare_amount  \n",
       "0  0.406780  0.284350               0.432694  \n",
       "1  0.406780  0.296853               0.429036  \n",
       "2  0.745763  0.075582               0.198533  \n",
       "3  0.203390  0.239988               0.337320  \n",
       "4  0.203390  0.659606               0.543531  "
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_test.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "cab_test.to_csv('final_results.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
